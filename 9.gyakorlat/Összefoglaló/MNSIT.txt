9.gyakorlat MNIST

A MNIST adatbázis (Modified National Institute of Standards and Technology adatbázis) egy nagy adatbázis kézzel
 írt számjegyekből, amelyeket általában különböző képfeldolgozó rendszerek képzésére használnak .
Az adatbázist széles körben használják a gépi tanulás területén való képzésre és tesztelésre .
Ezt a mintát a NTS adatsorainak összekuszálásával alkoták meg.Az alkotók úgy érezték, hogy mióta a NIST
 képzési adatállománya az amerikai Census Bureau alkalmazottaitól származott , míg a teszt adatkészletet
 amerikaközépiskolás diákok, nem volt alkalmas gépi tanulási kísérletekre.  Továbbá a NIST fekete-fehér
 képét normalizálták, hogy illeszkedjen egy 28x28 pixeles határoló dobozba, és anti-aliased , amely
 szürkeárnyalatos szinteket vezetett be.A MNIST adatbázis 60 000 képzési képet és 10 000 tesztelési 
képet tartalmaz.  A képzési készlet felét és a tesztkészlet felét a NIST képzési adatállományából vettük 
míg a képzési készlet másik felét és a tesztkészlet másik felét a NIST teszt adatkészletéből vettük.  Számos
 tudományos dokumentum készült a legalacsonyabb hibaarány elérésére irányuló kísérletek során; egy papír, a
 konvolúciós neurális hálózatok hierarchikus rendszerét használva , képes kezelni a hibaarányt a MNIST adatbázisban 0,23% -kal. 
Az adatbázis eredeti alkotói megőrzik a tesztelt módszerek közül néhányat.  Eredeti tanulmányukban atámogató vektor
 gépet , hogy 0,8% -os hibaarányt kapjon.  2018-ban közzétették a MNIST-hez hasonló kibővített adatkészletet, amely 
240 000 képzési képet tartalmaz, és 40 000 kézírásos számjegyből és karakterből álló képeket.
A képsorozatot az MNIST adatbázisban kombinációja két NIST adatbázisok: speciális adatbázis 1. és speciális adatbázis 3.
 Különleges Database 1-es és külön adatbázisban 3 áll számjegyek írta középiskolás diákok és alkalmazottak az USBAn.
1.Telepiteni kell a TensorFlow-ot. utána látrekell hozni egy twicetwo könyvtárat.
2.azért Python kóddal épitjük mert interfészével nagy számitási gráfokat kelesz számolnia.
---
A TensorFlow egy szoftverkönyvtár, gépi tanulási algoritmusok leírására és végrehajtására.
A TensorFlow-val tenzor transzformációs gráfokat lehet összerakni.
A Tenzorok sokdimenziós mátrixszerűségek.

A transzformációs gráfokba bemennek ezek a tenzorok, többféle módon transzformálódhatnak, a transzformációk eredményei összevonhatóak, és bemenetei lehetnek újabb transzformációknak, aztán a végén egy rakás másik tenzort kapunk eredményül.

A neurális hálók leírhatóak ilyen transzformációs gráf alakban.
A TensorFlow nem egy nurális háló library, annál eggyel alacsonyabb szintű, általánosabb dolog, ami többek között lehetőséget nyújt neurális hálók összerakására is. 

A TensorFlow rendszer használatát nagy számú optimalizáló algoritmus segíti.
A számítások vizualizációja a TensorBoard segítségével történhet.

A TensorFlow-val készített programok általában két részből állnak:
	- számítási gráf felépítése
	- számítási gráf futtatása
Fontos, hogy a TensorFlow egymástól jól elkülöníti a fenti két részt!


Tekintsünk egy alap példát!
Vegyünk fel két csúcsot, amelyek az 5 és a 9 konstansoknak felelnek meg.
	node1 = tf.constant(5.0, dtype=tf.float32)
	node2 = tf.constant(9.0)

A csúcsok kiértékeléséhez le kell futtatnunk a szekcióban a számítási gráfot. 
Az alábbi kóddal szekció objektumot hozunk létre, majd futtatjuk a számítási gráfot a 
csúcsok kiértékelésére: 
	sess = tf.Session()
	print(sess.run([node1, node2]))

Adjuk össze az előző két konstansunkat.
	node3 = tf.add(node1, node2)
	print(”sess.run(node3): ”, sess.run(node3))

További műveletekkel, például összeadás és szorzás művelettel bonyolultabb számítási gráfot készíthetünk.
	a = tf.placeholder(tf.float32)
	b = tf.placeholder(tf.float32)
	adder_node = a+b # + az összeadás műveletrövid megadása
	add_and_hatszor = adder_node * 6
	print(sess.run(add_and_hatszor, {a: 3, b:5}))

A placeholder esetén nem tudjuk előre, hogy milyen értéket kell tárolni!
A fenti példában összeadjuk a 3-at és az 5-öt, majd az eredményt beszorozzuk 6-tal.

A TensorFlow programban az összes változó inicializálásához explicite hívni kell egy speciális műveletet:
	init = tf.global_variables_initializer()
	sess.run(init)
